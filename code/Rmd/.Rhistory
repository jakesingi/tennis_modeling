test_out_odds$avg_winner_exp_payout = 0
test_out_odds$avg_loser_exp_payout = 0
for (i in 1:nrow(test_out_odds)) {
best_exp_payouts_i = compute_expected_payout(test_out_odds$MaxW[i], test_out_odds$MaxL[i], test_out_odds$pp_p1_match_win_prob[i], 1-test_out_odds$pp_p1_match_win_prob[i])
test_out_odds$best_winner_exp_payout[i] = best_exp_payouts_i[[1]]
test_out_odds$best_loser_exp_payout[i] = best_exp_payouts_i[[2]]
avg_exp_payouts_i = compute_expected_payout(test_out_odds$AvgW[i], test_out_odds$AvgL[i], test_out_odds$pp_p1_match_win_prob[i], 1-test_out_odds$pp_p1_match_win_prob[i])
test_out_odds$avg_winner_exp_payout[i] = avg_exp_payouts_i[[1]]
test_out_odds$avg_loser_exp_payout[i] = avg_exp_payouts_i[[2]]
}
head(test_out_odds %>% arrange(desc(best_winner_exp_payout)))
# Get max expected payout
test_out_odds$max_exp_payout = apply(test_out_odds[, c("best_winner_exp_payout", "best_loser_exp_payout")], 1, max)
test_out_odds$avg_exp_payout = apply(test_out_odds[, c("avg_winner_exp_payout", "avg_loser_exp_payout")], 1, max)
# Try a bunch of other thresholds
t = seq(0, 6, by = 0.01)
best_odds_profits = list()
avg_odds_profits = list()
best_odds_bets_placed = list()
avg_odds_bets_placed = list()
years = list()
for (i in 1:length(t)) {
test_out_odds$best_odds_profit = mapply(bet_profit, test_out_odds$best_winner_exp_payout, test_out_odds$best_loser_exp_payout, t[i], test_out_odds$MaxW, test_out_odds$MaxL)
test_out_odds$avg_odds_profit = mapply(bet_profit, test_out_odds$avg_winner_exp_payout, test_out_odds$avg_loser_exp_payout, t[i], test_out_odds$AvgW, test_out_odds$AvgL)
grp = test_out_odds %>%
group_by(model, year) %>%
summarize(best_odds_net_profit = sum(best_odds_profit), best_odds_n_bets = sum(best_odds_profit != 0), best_odds_return = best_odds_net_profit / best_odds_n_bets,
avg_odds_net_profit = sum(avg_odds_profit), avg_odds_n_bets = sum(avg_odds_profit != 0), avg_odds_return = avg_odds_net_profit / avg_odds_n_bets)
best_odds_profits[[i]] = grp$best_odds_net_profit
names(best_odds_profits[[i]]) = grp$model
avg_odds_profits[[i]] = grp$avg_odds_net_profit
names(avg_odds_profits[[i]]) = grp$model
best_odds_bets_placed[[i]] = grp$best_odds_n_bets
names(best_odds_bets_placed[[i]]) = grp$model
avg_odds_bets_placed[[i]] = grp$avg_odds_n_bets
names(avg_odds_bets_placed[[i]]) = grp$model
years[[i]] = grp$year
names(years[[i]]) = grp$model
}
# Clean up results and put them into a "profit" data frame
n_models = length(unique(test_out_odds$model))
n_test_years = length(unique(test_out_odds$year))
profit_df = data.frame(best_odds_profit = unlist(best_odds_profits), best_odds_bets_placed = unlist(best_odds_bets_placed),
avg_odds_profit = unlist(avg_odds_profits), avg_odds_bets_placed = unlist(avg_odds_bets_placed),
model = names(unlist(best_odds_profits)), thresh = rep(t, each=n_models*n_test_years), year=unlist(years))
profit_df %>%
slice(20:30)
# Just take one set of test matches (don't want to overcount)
# Replace NA ranks with Inf
one_set_test_matches = test_out_odds %>%
filter(model == "Multi-T_bin_games") %>%
mutate(winner_rank = ifelse(is.na(winner_rank), Inf, winner_rank),
loser_rank = ifelse(is.na(loser_rank), Inf, loser_rank))
null_model_results = one_set_test_matches %>%
mutate(best_odds_profit = case_when(winner_rank < loser_rank ~ MaxW - 1,
loser_rank < winner_rank ~ -1,
TRUE ~ 0),
avg_odds_profit = case_when(winner_rank < loser_rank ~ AvgW - 1,
loser_rank < winner_rank ~ -1,
TRUE ~ 0),
model = 'null')
null_model_results_by_year = null_model_results %>%
group_by(year) %>%
summarize(best_odds_bets_placed = sum(best_odds_profit != 0),
avg_odds_bets_placed = sum(avg_odds_profit != 0),
best_odds_profit = sum(best_odds_profit),
avg_odds_profit = sum(avg_odds_profit),
model = 'null')
null_model_results_by_year$thresh = seq(0, 6, length=n_test_years)
sum(null_model_results$best_odds_profit)
sum(null_model_results$avg_odds_profit)
model.labs = c("1.(a)", "1.(b)", "1.(c)", "Glicko-2", "null")
names(model.labs) = c("Multi-T_bin_games", "Multi-T_bernoulli_sets", "Multi-T_negbin_sets", "Glicko-2", "null")
# PLOT year over year profits
ggplot(profit_df %>% filter(model %in% c("Glicko-2", "Multi-Norm_bin_games", "Multi-T_bin_games")), aes(thresh, best_odds_profit, color=year)) +
geom_line() +
labs(x="Betting threshold (E)", y="Profit (units)", title="Betting with best odds available") +
geom_hline(data=null_model_results_by_year, aes(yintercept=best_odds_profit, color=year)) +
facet_wrap(~model, nrow=2, labeller = labeller(model = model.labs)) +
ylim(-150, 150)
#ggsave("../manuscript/first_draft/images/year_over_year_profits_best_odds.png")
ggplot(profit_df %>% filter(model %in% c("Glicko-2", "Multi-Norm_bin_games", "Multi-T_bin_games")), aes(thresh, avg_odds_profit, color=year)) +
geom_line() +
labs(x="Betting threshold (E)", y="Profit (units)", title="Betting with average odds available") +
geom_hline(data=null_model_results_by_year, aes(yintercept=avg_odds_profit, color=year)) +
facet_wrap(~model, nrow=2, labeller = labeller(model = model.labs)) +
ylim(-150, 25)
#ggsave("../manuscript/first_draft/images/year_over_year_profits_average_odds.png")
# Compute AUCs
library(DescTools)
auc_mat = matrix(nrow = length(unique(profit_df$model)), ncol = length(unique(profit_df$year)))
models = unique(profit_df$model)
years = unique(profit_df$year)
for (i in 1:length(models)) {
for (j in 1:length(years)) {
filtered_profit_df = profit_df %>% filter(model == models[i], year == years[j])
auc_mat[i, j] = AUC(filtered_profit_df$thresh, filtered_profit_df$best_odds_profit)
}
}
auc_df = as.data.frame(t(auc_mat))
auc_df$year = years
colnames(auc_df) = c(models, "year")
auc_df
# Summary statistics
summary(auc_df %>% select(-year))
# Get null model areas
null_model_results_by_year$AUC = 6*null_model_results_by_year$best_odds_profit
summary(null_model_results_by_year$AUC)
# Now get cumulative profit by summing over the years
# For the models
cum_profit_df = profit_df %>%
group_by(model, thresh) %>%
summarize(best_odds_profit = sum(best_odds_profit),
avg_odds_profit = sum(avg_odds_profit),
best_odds_bets_placed = sum(best_odds_bets_placed),
avg_odds_bets_placed = sum(avg_odds_bets_placed))
# For the null model
cum_null_model_results = null_model_results_by_year %>%
group_by(model) %>%
summarize(best_odds_profit = sum(best_odds_profit),
avg_odds_profit = sum(avg_odds_profit),
best_odds_bets_placed = sum(best_odds_bets_placed),
avg_odds_bets_placed = sum(avg_odds_bets_placed))
cum_profit_df %>%
arrange(desc(best_odds_profit)) %>%
head(20)
library(scales)
colors = hue_pal()(8)
# PLOT cumulative profits
ggplot(cum_profit_df, aes(thresh, best_odds_profit, color=model)) +
geom_line() +
labs(x="Betting threshold (E)", y="Profit (units)", title="Betting with best odds available") +
geom_hline(data=cum_null_model_results, aes(yintercept=best_odds_profit, color=model)) +
scale_color_manual(labels = model.labs, values = colors)
#ggsave("../manuscript/first_draft/images/cumulative_profits_best_odds.png")
ggplot(cum_profit_df, aes(thresh, avg_odds_profit, color=model)) +
geom_line() +
labs(x="Betting threshold (E)", y="Profit (units)", title="Betting with average odds available") +
geom_hline(data=cum_null_model_results, aes(yintercept=avg_odds_profit, color=model)) +
scale_color_manual(labels = model.labs, values = colors)
#ggsave("../manuscript/first_draft/images/cumulative_profits_average_odds.png")
# Find best threshold in given year vector for each model
find_best_thresh_by_year_for_each_model = function(given_years, odds_type) {
if (odds_type == "best") {
best_thresh_by_model = profit_df %>%
filter(year %in% as.character(given_years)) %>%
group_by(model, thresh) %>%
summarize(best_profit = sum(best_odds_profit)) %>% # Does sum(best_odds_profit) for odds_type = 'best'
arrange(desc(best_profit)) %>%
summarize(thresh = first(thresh)) %>%
arrange(model)
} else {
best_thresh_by_model = profit_df %>%
filter(year %in% as.character(given_years)) %>%
group_by(model, thresh) %>%
summarize(best_profit = sum(avg_odds_profit)) %>% # Does sum(avg_odds_profit) for odds_type = '[anything else]'
arrange(desc(best_profit)) %>%
summarize(thresh = first(thresh)) %>%
arrange(model)
}
return(best_thresh_by_model)
# COULD DO A (WEIGHTED) AVERAGE OF PRIOR YEARS PROFITS, E.G.
# best_thresh_by_year_by_model = profit_df %>%
#   #filter(year %in% c(as.character(as.numeric(given_year)),  as.character(as.numeric(given_year) - 1))) %>%
#   filter(year <= given_year) %>%
#   group_by(model, year) %>%
#   arrange(desc(best_odds_profit)) %>%
#   summarize(thresh = first(thresh), profit = first(best_odds_profit)) %>%
#   ungroup(year) %>%
#   mutate(avg_thresh = mean(thresh)) %>%
#   group_by(model) %>%
#   summarize(thresh = round(first(avg_thresh), 2))
#return(best_thresh_by_year_by_model)
}
find_best_thresh_by_year_for_each_model(2010:2012, "best")
find_best_thresh_by_year_for_each_model(2010:2012, "avg")
# Runs betting experiment
run_betting_experiment = function(test_years, odds_type) {
res_profit = list()
res_matches_we_bet_on = list()
best_thresh_df = find_best_thresh_by_year_for_each_model(2010:2012, odds_type)
best_threshes = best_thresh_df %>% pull(thresh)
model_names = best_thresh_df %>% pull(model)
for (i in 1:length(test_years)) {
# Get the profit for each model in year test_year using the best thresh from previous year
lst_profit = list()
lst_matches_we_bet_on = list()
for (j in 1:length(best_threshes)) {
# Record profits from matches we bet on
lst_profit[[j]] = profit_df %>% filter(model == model_names[j],
year == as.character(test_years[i]),
thresh > best_threshes[j] - .005,
thresh < best_threshes[j] + .005)
# Record matches with our bets
matches_we_bet_on = test_out_odds %>%
filter(model == model_names[j],
year == as.character(test_years[i]),
max_exp_payout >= (best_threshes[j])) %>%
mutate(profit = ifelse(odds_type == "best", ifelse(max_exp_payout == best_winner_exp_payout, MaxW-1, -1),
ifelse(max_exp_payout == avg_winner_exp_payout, AvgW-1, -1))) %>%#,
#avg_odds_profit = ifelse(max_exp_payout == avg_winner_exp_payout, AvgW-1, -1)) %>%
inner_join(wide_posterior_mean_frames, by = c("winner_id" = "player_id", "month", "model")) %>%
inner_join(wide_posterior_mean_frames, by = c("loser_id" = "player_id", "month", "model"), suffix = c("_winner", "_loser"))
lst_matches_we_bet_on[[j]] = matches_we_bet_on
}
if (odds_type == "best") {
res_profit[[i]] = do.call(rbind, lst_profit) %>%
select(contains("best"), model, thresh, year)
} else {
res_profit[[i]] = do.call(rbind, lst_profit) %>%
select(contains("avg"), model, thresh, year)
}
res_matches_we_bet_on[[i]] = do.call(rbind, lst_matches_we_bet_on)
# Update threshes, use as big a rolling window as possible
best_threshes = find_best_thresh_by_year_for_each_model((2010):(test_years[i]), odds_type) %>% pull(thresh)
}
profit_res = do.call(rbind, res_profit) %>%
arrange(model)
out = list(betting_results = profit_res,
matches_with_bets = do.call(rbind, res_matches_we_bet_on))
return(out)
}
# Now run the betting experiment
# For given odds_type
odds_type = "best"
# And for given test_years
test_years = seq(2013, 2017, by = 1)
out_best_odds = run_betting_experiment(test_years, odds_type)
out_best_odds_betting_results = out_best_odds$betting_results
out_best_odds_betting_results
# Sum over the years to get cumulative profit, bets placed, avg thresh, etc
out_best_odds_betting_results %>%
group_by(model) %>%
summarize(total_profit = sum(best_odds_profit),
total_bets_placed = sum(best_odds_bets_placed),
average_thresh_used = mean(thresh),
n_test_years = n()) %>%
arrange(desc(total_profit))
# Now run the betting experiment
# For given odds_type
odds_type = "avg"
# And for given test_years
test_years = seq(2013, 2017, by = 1)
out_avg_odds = run_betting_experiment(test_years, odds_type)
out_avg_odds_betting_results = out_avg_odds$betting_results
out_avg_odds_betting_results
# Sum over the years to get cumulative profit, bets placed, avg thresh, etc
out_avg_odds_betting_results %>%
group_by(model) %>%
summarize(total_profit = sum(avg_odds_profit),
total_bets_placed = sum(avg_odds_bets_placed),
average_thresh_used = mean(thresh),
n_test_years = n()) %>%
arrange(desc(total_profit))
# See matches we bet on for the Multi-T games model
matches_res = out_best_odds$matches_with_bets
multi_t_games_model_bets = matches_res %>%
filter(model == "Multi-T_bin_games") %>%
arrange(desc(best_odds_profit))
multi_t_bernoulli_sets_bets = matches_res %>%
filter(model == "Multi-T_bernoulli_sets")
multi_t_negbin_sets_model_bets = matches_res %>%
filter(model == "Multi-T_negbin_sets") %>%
arrange(desc(best_odds_profit))
head(multi_t_games_model_bets)
head(multi_t_negbin_sets_model_bets)
quantile(multi_t_games_model_bets$MaxW)
hist(multi_t_games_model_bets$MaxW, breaks = 100)
edges = c(multi_t_games_model_bets %>% filter(best_odds_profit > 0) %>% pull(MaxW))
# Check performance by surface
multi_t_games_model_bets %>%
group_by(surface) %>%
summarize(profit = sum(best_odds_profit), n_bets_won = sum(best_odds_profit > 0), n_bets_placed = n())
multi_t_bernoulli_sets_bets %>%
group_by(surface) %>%
summarize(profit = sum(best_odds_profit), n_bets_won = sum(best_odds_profit > 0), n_bets_placed = n())
multi_t_negbin_sets_model_bets %>%
group_by(surface) %>%
summarize(profit = sum(best_odds_profit), n_bets_won = sum(best_odds_profit > 0), n_bets_placed = n())
multi_t_games_model_bets %>%
filter(best_odds_profit > 0) %>%
arrange(desc(best_odds_profit)) %>%
head(20)
multi_t_bernoulli-sets_bets %>%
filter(best_odds_profit > 0) %>%
arrange(desc(best_odds_profit)) %>%
head(20)
multi_t_games_model_bets %>%
filter(best_odds_profit > 0) %>%
arrange(desc(best_odds_profit)) %>%
head(20)
multi_t_bernoulli_sets_bets %>%
filter(best_odds_profit > 0) %>%
arrange(desc(best_odds_profit)) %>%
head(20)
multi_t_negbin_sets_model_bets %>%
filter(best_odds_profit > 0) %>%
arrange(desc(best_odds_profit)) %>%
head(20)
players_to_plot = c("Novak Djokovic", "Roger Federer", "Rafael Nadal", "Andy Murray", "Juan Martin del Potro", "David Ferrer", "Tomas Berdych", "Jo-Wilfried Tsonga", "Stan Wawrinka",
"Marin Cilic")
ggplot(posterior_mean_frames %>% filter(skill_type == 'hard_skill', model == "Multi-T_bin_games", full_name %in% players_to_plot),
aes(month, posterior_mean, color=full_name)) +
geom_line(linewidth=1.0) +
#geom_line(aes(month, lower.025_q, color=full_name), linetype='dashed') +
#geom_line(aes(month, upper.975_q, color=full_name), linetype = 'dashed')  +
ggtitle("Hard Court Skills") +
labs(y = 'posterior mean', color = "name")
#ggsave("../manuscript/first_draft/images/hard_skills_over_time.png")
ggplot(posterior_mean_frames %>% filter(skill_type == 'clay_skill', model == "Multi-T_bin_games", full_name %in% players_to_plot),
aes(month, posterior_mean, color=full_name)) +
geom_line(linewidth=1.0)  +
#geom_line(aes(month, lower.025_q, color=full_name), linetype='dashed') +
#geom_line(aes(month, upper.975_q, color=full_name), linetype = 'dashed')  +
ggtitle("Clay Court Skills") +
labs(y = 'posterior mean', color = "name")
#ggsave("../manuscript/first_draft/images/clay_skills_over_time.png")
ggplot(posterior_mean_frames %>% filter(skill_type == 'grass_skill', model == "Multi-T_bin_games", full_name %in% players_to_plot),
aes(month, posterior_mean, color=full_name)) +
geom_line(linewidth=1.0)  +
#geom_line(aes(month, lower.025_q, color=full_name), linetype='dashed') +
#geom_line(aes(month, upper.975_q, color=full_name), linetype = 'dashed')  +
ggtitle("Grass Court Skills") +
labs(y = 'posterior mean', color = "name")
#ggsave("../manuscript/first_draft/images/grass_skills_over_time.png")
ggplot(posterior_mean_frames %>% filter(full_name == "Rafael Nadal", model == "Multi-T_negbin_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Roger Federer") +
labs(y = "solid: posterior mean; dotted: 95% credible interval", color = "surface") +
scale_color_manual(labels = c("clay", "grass", "hard"), values = c("red", "forestgreen", "blue"))
#ggsave("../manuscript/first_draft/images/federer_combo_1a.png")
ggplot(posterior_mean_frames %>% filter(full_name == "Roger Federer", model == "Multi-T_negbin_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
labs(y = "solid: posterior mean; dotted: 95% credible interval", color = "surface") +
scale_color_manual(labels = c("clay", "grass", "hard"), values = c("red", "forestgreen", "blue")) +
ggtitle("Roger Federer")
#ggsave("../manuscript/first_draft/images/federer_combo_1b.png")
ggplot(posterior_mean_frames %>% filter(full_name == "Roger Federer", model == "Multi-T_bernoulli_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Roger Federer") +
labs(y = "solid: posterior mean; dotted: 95% credible interval", color = "surface") +
scale_color_manual(labels = c("clay", "grass", "hard"), values = c("red", "forestgreen", "blue"))
#ggsave("../manuscript/first_draft/images/federer_combo_2a.png")
ggplot(posterior_mean_frames %>% filter(full_name == "Roger Federer", model == "Multi-T_bin_games"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Roger Federer: Multi-T bernoulli sets")
ggplot(posterior_mean_frames %>% filter(full_name == "Rafael Nadal", model == "Multi-T_bernoulli_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Rafa Nadal: Multi-T bernoulli sets")
ggplot(posterior_mean_frames %>% filter(full_name == "Rafael Nadal", model == "Multi-T_bin_games"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Andy Roddick: Multi-T negbin games")
ggplot(posterior_mean_frames %>% filter(full_name == "Tommy Haas", model == "Multi-T_negbin_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("del Potro: Multi-T negbin games")
ggplot(posterior_mean_frames %>% filter(full_name == "Novak Djokovic", model == "Multi-T_negbin_sets"),
aes(x=month, y=posterior_mean, color=skill_type)) +
geom_line(linewidth=1.0) +
geom_line(aes(month, lower.025_q), linetype='dashed') +
geom_line(aes(month, upper.975_q), linetype = 'dashed') +
ggtitle("Djokovic: Multi-T negbin games")
# See how width of 95% interval changes
ggplot(posterior_mean_frames %>% filter(full_name == "Andy Roddick", model == "Multi-T_bin_games"),
aes(x=month, y=(upper.975_q - lower.025_q), color=skill_type)) +
geom_line(linewidth=1.0) +
ggtitle("Andy Roddick: Length of 95% Posterior Interval")
ggplot(posterior_mean_frames %>% filter(full_name == "Rafael Nadal", model == "Multi-T_bin_games"),
aes(x=month, y=(upper.975_q - lower.025_q), color=skill_type)) +
geom_line(linewidth=1.0) +
ggtitle("Rafael Nadal: Length of 95% Posterior Interval")
# Acquire accuracies
multi_t_bin_games_accs = rbind(read.csv("./multi_t_models2/first22_multi_t_games_test_acc.csv"),
read.csv("./multi_t_models2/next38_multi_t_games_test_acc.csv"),
read.csv("./multi_t_models2/last32_multi_t_games_test_acc.csv"))
multi_t_bernoulli_sets_accs = read.csv("./multi_t_models3/bernoulli_sets_test_acc.csv")
multi_t_negbin_sets_accs = rbind(read.csv("./multi_t_models2/first22_multi_t_negbin_sets_test_acc.csv"),
read.csv("./multi_t_models2/next38_multi_t_negbin_sets_test_acc.csv"),
read.csv("./multi_t_models2/last32_multi_t_negbin_sets_test_acc.csv"))
# multi_norm_bin_games_accs = read.csv("./multi_normal_models/multi_normal_games_test_acc.csv")
# multi_norm_bin_sets_accs = read.csv("./multi_normal_models/multi_normal_sets_test_acc.csv")
# multi_norm_negbin_sets_accs = read.csv("./multi_normal_models/multi_normal_negbin_sets_test_acc.csv")
acc_df = data.frame(model = c("Multi-T_bin_games", "Multi-T_bernoulli_sets", "Multi-T_negbin_sets", "Glicko-2"),
average_test_acc = c(mean(multi_t_bin_games_accs$x), mean(multi_t_bernoulli_sets_accs$x), mean(multi_t_negbin_sets_accs$x),
mean(glicko_accs)))
acc_df %>%
arrange(desc(average_test_acc))
# OR JUST USE THE ODDS DATA
acc_df = test_out_odds %>%
group_by(model) %>%
summarize(acc = mean(pp_p1_match_win_prob > 0.5), n = n())
acc_df = rbind(acc_df, c("Best_odds", mean(one_set_test$winner_implied_prob_best_odds > 0.5), nrow(one_set_test)))
acc_df = rbind(acc_df, c("Average_odds", mean(one_set_test$winner_implied_prob_avg_odds > 0.5), nrow(one_set_test)))
acc_df = rbind(acc_df, c("ATP Rankings", mean(one_set_test_matches$winner_rank < one_set_test_matches$loser_rank), nrow(one_set_test)))
acc_df %>%
arrange(desc(acc))
# Acquire train times
multi_t_bin_games_train_times = as.vector(c(do.call(rbind, readRDS("./multi_t_models2/first22_multi_t_games_train_times.RData")),
do.call(rbind, readRDS("./multi_t_models2/next38_multi_t_games_train_times.RData")),
do.call(rbind, readRDS("./multi_t_models2/last32_multi_t_games_train_times.RData"))))
#multi_t_bin_sets_train_times = as.vector(do.call(rbind, readRDS("./multi_t_models/multi_t_sets_train_times.RData")))
multi_t_bernoulli_sets_train_times = as.vector(do.call(rbind, readRDS("./multi_t_models3/bernoulli_sets_train_times.RData")))
multi_t_negbin_sets_train_times = as.vector(c(do.call(rbind, readRDS("./multi_t_models2/first22_multi_t_negbin_sets_train_times.RData")),
do.call(rbind, readRDS("./multi_t_models2/next38_multi_t_negbin_sets_train_times.RData")),
do.call(rbind, readRDS("./multi_t_models2/last32_multi_t_negbin_sets_train_times.RData"))))
# multi_norm_bin_games_train_times = as.vector(do.call(rbind, readRDS("./multi_normal_models/multi_normal_games_train_times.RData")))
# multi_norm_bin_sets_train_times = as.vector(do.call(rbind, readRDS("./multi_normal_models/multi_normal_sets_train_times.RData")))
# multi_norm_negbin_sets_train_times = as.vector(do.call(rbind, readRDS("./multi_normal_models/multi_normal_negbin_sets_train_times.RData")))
train_time_df = data.frame(model = rep(c("Multi-T_bin_games", "Multi-T_bernoulli_sets", "Multi-T_negbin_sets"), each = 92),
train_time = c(multi_t_bin_games_train_times, multi_t_bernoulli_sets_train_times, multi_t_negbin_sets_train_times),
month = rep(1:92, n_models-1))
# Plot them
ggplot(train_time_df, aes(month, train_time, color = model)) +
geom_line() +
scale_color_manual(labels = model.labs, values = c("purple", "navyblue", "red", "hotpink", "darkgreen", "orange")) +
labs(title = "Model train times", x = "month", y = "train time (s)")
#ggsave("../manuscript/first_draft/images/model_train_times.png")
# Only rate players with 5 matches played in last year
match_data_365 = atp_match_dat %>%
mutate(tourney_date = as.Date(tourney_date), days_passed_since_tourney = -(tourney_date - as.Date('2017-11-01'))) %>%
filter(days_passed_since_tourney <= 365)
n_matches_last_year = match_data_365 %>%
pivot_longer(., cols=c(winner_id, loser_id), names_to = "result", values_to = "player_id") %>%
group_by(player_id) %>%
summarize(n = n())
players_to_rate =  n_matches_last_year %>%
filter(n >= 5) %>%
pull(player_id)
# Grab top 10 at end of training
top10 = wide_posterior_mean_frames %>%
filter(month == max(wide_posterior_mean_frames$month),
model == "Multi-T_bin_games",
player_id %in% players_to_rate) %>%
arrange(desc(posterior_mean_hard_skill)) %>%
select(player_id, full_name, posterior_mean_hard_skill, posterior_mean_clay_skill, posterior_mean_grass_skill) %>% head(10)
top10
# Get their rankings
rankings %>% filter(ranking_date == '2017-11-06') %>% arrange(rank) %>% filter(player %in% top10$player_id)
#Get top 10 clay players for each model
posterior_mean_frames %>%
filter(skill_type == "clay_skill", month == "2017-11-01", player_id %in% players_to_rate) %>%
arrange(model, desc(posterior_mean)) %>%
group_by(model) %>%
mutate(rank = rank(-posterior_mean)) %>%
filter(rank <= 10)
# Plot distribution of posterior means for 3 models
ggplot(wide_posterior_mean_frames %>% filter(month == "2017-11-01", model == "Multi-T_bin_games" | model == "Multi-T_bernoulli_sets" | model == "Multi-T_negbin_sets"), aes(posterior_mean_hard_skill, fill = model)) +
geom_density(alpha=0.4) +
xlim(-2, 2) +
ggtitle("Hard court posterior mean distributions") +
labs(x = 'posterior mean') +
scale_fill_manual(labels = c("1.(a)", "1.(b)", "1.(c)"), values = c("red", "green", "blue"))
#ggsave("../manuscript/first_draft/images/posterior_mean_distn_by_model.png")
#overall_skills_by_surface = readRDS("./multi_normal_models/multi_normal_games_overall_skills_by_surface")
# Get Nadal posterior for 1.(a)
# ggplot(overall_skills_by_surface %>% filter(full_name == "Rafael Nadal")) +
#   geom_density(aes(x=value, fill = skill_type), alpha = 0.5) +
#   ggtitle("Rafael Nadal Marginal Posteriors") +
#   scale_fill_manual(values = c("red", "green", "blue"), labels = c("clay", "grass", "hard")) +
#   labs(x = 'skill', fill = 'surface')
#ggsave("../manuscript/first_draft/images/nadal_marginal_posteriors.png")
multi_t_bin_games_skill_summaries =  readRDS("./multi_t_models2/last32_multi_t_games_skill_summaries.RData") %>% last()
hist(multi_t_bin_games_skill_summaries$rhat)
multi_t_bin_games_skill_summaries %>%
filter(grepl("beta", variable))
multi_t_bin_games_skill_summaries %>%
filter(grepl("nu", variable))
multi_t_bin_games_skill_summaries %>%
filter(grepl("Sigma", variable))
#hist(do.call(rbind, multi_norm_sets_skill_summaries)$rhat)
multi_t_negbin_sets_skill_summaries = rbind(do.call(rbind, readRDS("./multi_t_models2/first22_multi_t_games_skill_summaries.RData")),
do.call(rbind, readRDS("./multi_t_models2/next38_multi_t_games_skill_summaries.RData")),
do.call(rbind, readRDS("./multi_t_models2/last32_multi_t_games_skill_summaries.RData")))
hist(multi_t_negbin_sets_skill_summaries$rhat)
multi_t_negbin_sets_skill_summaries %>%
filter(grepl("beta", variable)) %>%
pull(mean) %>%
hist(., main = "Histogram of time-off covariate")
multi_t_negbin_sets_skill_summaries %>%
filter(grepl("nu", variable)) %>%
pull(mean) %>%
hist(., main = "Histogram of degrees of freedom")
multi_t_negbin_sets_skill_summaries %>%
filter(grepl("Sigma", variable))
multi_t_bernoulli_sets_skill_summaries = do.call(rbind, readRDS("./multi_t_models3/bernoulli_sets_skill_summaries.RData"))
multi_t_bernoulli_sets_skill_summaries %>%
filter(grepl("beta[2]", variable, fixed = T)) %>%
pull(mean) %>%
hist(., main = "Histogram of set-momentum covariate")
setwd("~/Documents/projects/thesis/appendix/code/Rmd")
setwd("~/")
setwd("~/Documents/projects/thesis/appendix/code/Rmd")
