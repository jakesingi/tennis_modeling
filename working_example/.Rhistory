ggtitle("More good players") +
scale_fill_manual(values = c("red", "green", "blue"))
# Get posterior means
posterior_mean_df = overall_skills_by_surface %>%
group_by(player_id, full_name, skill_type) %>%
summarize(estimated_skill = mean(value)) %>%
pivot_wider(., names_from = "skill_type", values_from = "estimated_skill")
posterior_mean_df %>%
arrange(desc(hard_skill))
posterior_mean_df %>%
arrange(desc(clay_skill))
posterior_mean_df %>%
arrange(desc(grass_skill))
# setwd("~")
# write.csv(posterior_mean_df, "./Desktop/posterior_means_multi_normal.csv", row.names = F)
setwd("~/Documents/projects/thesis/variational_bayes")
set.seed(900)
library(tidyverse)
library(rstan)
library(posterior)
TRAIN_START_DATE = '2010-01-01'
TRAIN_END_DATE = '2010-07-01'
TEST_START_DATE = TRAIN_END_DATE
TEST_END_DATE = '2010-08-01'
# Get match data
atp_match_dat = read.csv('../appendix/data/complete_match_info_fixed_n_months.csv', header = T,
colClasses = c("character", "character", "character", "character", "integer", "character",  "Date", "double", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", rep("integer", 3))) %>%
filter(tourney_date >= TRAIN_START_DATE, tourney_date < TEST_END_DATE) %>%
mutate(surface = case_when(surface == "Hard" ~ 1,
surface == "Clay" ~ 2,
surface == "Grass" ~ 3,
surface == "Carpet" ~ 1),
games = w_games + l_games,
month = as.Date(paste0(strftime(tourney_date,"%Y-%m"), "-01")),
month_numeric = as.numeric(month)) %>%
mutate(Period = dense_rank(month_numeric))
# Get rankings
rankings00s = read.csv("../tennis_atp/atp_rankings_00s.csv", header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings10s = read.csv('../tennis_atp/atp_rankings_10s.csv', header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings20s = read.csv('../tennis_atp/atp_rankings_20s.csv', header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings = rbind(rankings00s, rankings10s, rankings20s)
rm(rankings00s, rankings10s, rankings20s)
head(atp_match_dat)
tail(atp_match_dat)
# Get biographical data
names = read.csv("../tennis_atp/atp_players.csv", header = T) %>%
mutate(full_name = paste(name_first, name_last)) %>%
mutate(player_id = as.character(player_id))
# Get players who've been in the top x in the 2010's and 2020's
# players_to_rate = rankings %>%
#   filter(ranking_date >= TRAIN_START_DATE, ranking_date < TRAIN_END_DATE) %>%
#   filter(rank <= 30) %>%
#   pull(player) %>%
#   unique()
# GET TRAIN / TEST
train = atp_match_dat %>%
#filter(winner_id %in% players_to_rate & loser_id %in% players_to_rate) %>%  # Could filter on the date, too.... whatever
filter(tourney_date >= TRAIN_START_DATE, tourney_date < TRAIN_END_DATE)
test = atp_match_dat %>%
#filter(winner_id %in% players_to_rate & loser_id %in% players_to_rate) %>%  # Could filter on the date, too.... whatever
filter(tourney_date >= TEST_START_DATE & tourney_date < TEST_END_DATE)
train_test = rbind(train, test)
train_idx = train_test$tourney_date >= TRAIN_START_DATE & train_test$tourney_date < TRAIN_END_DATE
test_idx = train_test$tourney_date >= TEST_START_DATE & train_test$tourney_date < TEST_END_DATE
#players_to_rate = unique(c(train$winner_id, train$loser_id))
print(dim(train))
print(dim(test))
print(colSums(is.na(train)))
head(train %>% arrange(tourney_date))
# Collect IDs for labeling players
IDs = sort(unique(c(train$winner_id, train$loser_id)))
integer_map = 1:length(IDs)
ID_integer_map_df = data.frame(ID = IDs, integer_map = integer_map)
ID_integer_map_df$ID = as.character(ID_integer_map_df$ID)
# Join with train
# train2 = train %>%
#   inner_join(ID_integer_map_df, by = c("winner_id" = "ID")) %>%
#   inner_join(ID_integer_map_df, by = c("loser_id" = "ID"), suffix = c(".winner", ".loser"))
train = train %>%
select(winner_id, loser_id, best_of, score, set_order, w_games, games, sets_won_winner, sets_won_loser, total_sets, winner_age, loser_age, N_months_since_last_match_winner,
N_months_since_last_match_loser, surface, tourney_date, month, month_numeric, Period)
# train1 = pivot_longer(train, cols = c("surface"))
# train1 = pivot_wider(train1, names_from = name, values_from = value, names_expand=TRUE)
# train1 %>%
#     dplyr::group_by(winner_id, loser_id, best_of, score, set_order, sets_won_winner, total_sets, winner_age, loser_age, N_months_since_last_match_winner, N_months_since_last_match_loser, name) %>%
#     dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
#     dplyr::filter(n > 1L)
# print(dim(train))
# print(colSums(is.na(train)))
# print(length(unique(c(train$integer_map.winner, train$integer_map.loser))))
# Join names df with ID_integer_map_df
names = names %>%
left_join(ID_integer_map_df, by = c("player_id" = "ID"))
# Setup design matrices
N = nrow(train_test)  # number of matches
J = length(unique(c(train_test$winner_id, train_test$loser_id)))  # number of total players
T = max(train$Period)
covariates = c("age", "age^2", "N_months_since_last_match")
p = length(covariates)
X_skill = matrix(0, nrow = N, ncol = 3*J)  # Matrix for the player skills
X1 = matrix(0, nrow = N, ncol = p)  # Matrix for player 1 characteristics (age, age^2, and months since last match)
X2 = matrix(0, nrow = N, ncol = p)  # Matrix for player 2 characteristics (age, age^2, and months since last match)
# Build X_skill, X1, and X2
id_players = unique(c(train_test$winner_id, train_test$loser_id))
colnames(X_skill) = c(paste0("overall_and_hard_skill_", id_players), paste0("clay_skill_", id_players), paste0("grass_skill_", id_players))
colnames(X1) = covariates
colnames(X2) = covariates
X_skill_time = matrix(0, nrow = N, ncol = J)
colnames(X_skill_time) = id_players
# Scale N_months_since_last_match
# Normalize function
# normalize = function(x) {
#   max_x = max(x)
#   min_x = min(x)
#   return((x - min_x) / (max_x - min_x))
# }
# train_test$N_months_since_last_match_winner_tilde = normalize(train_test$N_months_since_last_match_winner)
# train_test$N_months_since_last_match_loser_tilde = normalize(train_test$N_months_since_last_match_loser)
for (i in 1:N) {
# Assign baseline (hard court) skills
X_skill[i, paste0("overall_and_hard_skill_", train_test$winner_id[i])] = 1
X_skill[i, paste0("overall_and_hard_skill_", train_test$loser_id[i])] = -1
# If surface is clay, assign clay skills
if (train_test[i, "surface"] == 2) {
X_skill[i, paste0("clay_skill_", train_test$winner_id[i]) ]  = 1
X_skill[i, paste0("clay_skill_", train_test$loser_id[i]) ]  = -1
# If surface is grass, assign grass skills
} else if (train_test[i, "surface"] == 3) {
X_skill[i, paste0("grass_skill_", train_test$winner_id[i]) ]  = 1
X_skill[i, paste0("grass_skill_", train_test$loser_id[i]) ]  = -1
}
# Build X1
#X1[i, 1] = train_test[i, "winner_age_tilde"]
#X1[i, 2] = train_test[i, "winner_age_tilde"]^2
#X1[i, 3] = train_test[i, "winner_age"]^3
#X1[i, 3] = log(train_test[i, "N_months_since_last_match_winner"] + 1)
#X1[i, 3] = train_test[i, "N_months_since_last_match_winner"]
# Build X2
#X2[i, 1] = train_test[i, "loser_age_tilde"]
#X2[i, 2] = train_test[i, "loser_age_tilde"]^2
#X2[i, 3] = train_test[i, "loser_age"]^3
#X2[i, 3] = log(train_test[i, "N_months_since_last_match_loser"] + 1)
X2[i, 3] = train_test[i, "N_months_since_last_match_loser"]
# Build X_skill_time
X_skill_time[i, train_test$winner_id[i]] = train_test[i, "N_months_since_last_match_winner"]
X_skill_time[i, train_test$loser_id[i]] = train_test[i, "N_months_since_last_match_loser"]
# Build Z
# Z[i, paste0(train_test$winner_id[i], "_", years[i])] = 1
# Z[i, paste0(train_test$loser_id[i], "_", years[i])] = -1
#time_off_mat[i, paste0("time_off_", train_test$winner_id[i])] = train_test[i, "N_months_since_last_match_winner"]
#time_off_mat[i, paste0("time_off_", train_test$loser_id[i])] = train_test[i, "N_months_since_last_match_loser"]
}
# Build X_skill_time
# if (T > 1) {
#   for (t in 2:T) {
#     for (j in 1:J) {
#       temp = atp_match_dat %>%
#         filter(Period < t, (winner_id == id_players[j] | loser_id == id_players[j])) %>%
#         arrange(Period)
#       tail(1)
#       last_period = ifelse(nrow(temp) == 0, 0, temp$Period)
#       time_since_last_rating = t - last_period - 1 # Subtract 1 since if period = 2 and you were rated in period 1, this means there've been 0 periods since rating
#       X_skill_time[t, j] = time_since_last_rating
#     }
#   }
# }
# Indicator matrix z
z = X_skill[, 1:J]
z[z == -1] = 1
z1 = X_skill[, 1:J]
z1[z1 == -1] = 0
z2 = X_skill[, 1:J]
z2[z2 == 1] = 0
z2[z2 == -1] = 1
hard_idx = train_test$surface == 1
clay_idx = train_test$surface == 2
grass_idx = train_test$surface == 3
# TRAIN design matrices
X_skill_hard = X_skill[hard_idx & train_idx, 1:J]
X_skill_clay = X_skill[clay_idx & train_idx, 1:(2*J)]
X_skill_grass = X_skill[grass_idx & train_idx, c(1:J, (2*J+1):(3*J))]
X_skill_train = X_skill[train_idx, ]
X_skill_mu_train = X_skill_train[, 1:J]
X_skill_mu_train[X_skill_mu_train == -1] = 1
#X_skill_time_train = X_skill_time[train_idx, ]
# TEST design matrices
X_skill_tilde = X_skill[test_idx, ]
X1_tilde = X1[test_idx, ]
X2_tilde = X2[test_idx, ]
#time_off_mat_tilde = time_off_mat[test_idx, ]
# Prepare for TRAINING
Nhard = nrow(X_skill_hard)  # number of matches on hard
Nclay = nrow(X_skill_clay)
Ngrass = nrow(X_skill_grass)
N_train = Nhard + Nclay + Ngrass
#J = length(unique(c(train$winner_id, train$loser_id)))  # number of players
#covariates = c("age", "age^2", "N_months_since_last_match")
covariates = "N_months_since_last_match"
p = length(covariates)
# Collect remaining data for TRAINING
## FOR SETS
winner_sets_hard = train_test$sets_won_winner[hard_idx & train_idx]
winner_sets_clay = train_test$sets_won_winner[clay_idx & train_idx]
winner_sets_grass = train_test$sets_won_winner[grass_idx & train_idx]
total_sets_hard = train_test$total_sets[hard_idx & train_idx]
total_sets_clay = train_test$total_sets[clay_idx & train_idx]
total_sets_grass = train_test$total_sets[grass_idx & train_idx]
## FOR GAMES
winner_games_hard = train_test$w_games[hard_idx & train_idx]
winner_games_clay = train_test$w_games[clay_idx & train_idx]
winner_games_grass = train_test$w_games[grass_idx & train_idx]
total_games_hard = train_test$total_games[hard_idx & train_idx]
total_games_clay = train_test$total_games[clay_idx & train_idx]
total_games_grass = train_test$total_games[grass_idx & train_idx]
# For Neg-bin model
sets_lost_winner_hard = train_test$sets_won_loser[hard_idx & train_idx]  # sets lost by the winner on hard = sets won by the loser
sets_lost_winner_clay = train_test$sets_won_loser[clay_idx & train_idx]
sets_lost_winner_grass = train_test$sets_won_loser[grass_idx & train_idx]
best_of_hard = train_test$best_of[hard_idx & train_idx]
best_of_clay = train_test$best_of[clay_idx & train_idx]
best_of_grass = train_test$best_of[grass_idx & train_idx]
# Collect best_of for each test match (for binomial model), either 3 or 5
N_tilde_sets = test$best_of
N_tilde_games = 13*N_tilde_sets
# Number of test matches
N_test = nrow(X_skill_tilde)
# Try multi-threading
library(cmdstanr)
fit = cmdstan_model("../appendix/working_example/multivariate_glicko.stan", cpp_options = list(stan_threads = TRUE))
model_data = list(J = J,
N_train = nrow(train),
X_skill = X_skill_train,
X_skill_time = X_skill_time[train_idx, ],
z = z[train_idx, ],
z1 = z1[train_idx, ],
z2 = z2[train_idx, ],
X1 = X1[train_idx, 3],
X2 = X2[train_idx, 3],
total_n = train$best_of,
winner_y = train$sets_won_loser)
saveRDS(model_data, "./working_example/model_data.RDS")
tmp = readRDS("./working_example/model_data.RDS")
write.csv(tmp$X_skill, "X_skill.csv", row.names = F)
write.csv(tmp$z1, "z1.csv", row.names = F)
write.csv(tmp$z1, "z1.csv", row.names = F)
write.csv(tmp$X1, "X1.csv", row.names = F)
write.csv(tmp$X2, "X2.csv", row.names = F)
write.csv(tmp$winner_y, "winner_y.csv", row.names = F)
write.csv(tmp$total_n, "total_n.csv", row.names = F)
J
N_train
getwd()
write.csv(tmp$X_skill, "X_skill.csv", row.names = F)
write.csv(tmp$z1, "z1.csv", row.names = F)
write.csv(tmp$z2, "z2.csv", row.names = F)
write.csv(tmp$X1, "X1.csv", row.names = F)
write.csv(tmp$X2, "X2.csv", row.names = F)
write.csv(tmp$winner_y, "winner_y.csv", row.names = F)
write.csv(tmp$total_n, "total_n.csv", row.names = F)
getwd()
library(cmdstanr)
# Number of matches: 1,745
# Number of players: 437
# List with inputs to the model
model_data = readRDS("./working_example/model_data.RDS")
# Fit the model
fit = cmdstan_model("./multivariate_glicko.stan", cpp_options = list(stan_threads = TRUE))
getwd()
setwd("~/Documents/projects/thesis/variational_bayes/working_example")
setwd("~/Documents/projects/thesis/appendix/working_example")
set.seed(900)
library(tidyverse)
library(rstan)
library(posterior)
TRAIN_START_DATE = '2010-01-01'
TRAIN_END_DATE = '2010-07-01'
TEST_START_DATE = TRAIN_END_DATE
TEST_END_DATE = '2010-08-01'
# Get match data
atp_match_dat = read.csv('../appendix/data/complete_match_info_fixed_n_months.csv', header = T,
colClasses = c("character", "character", "character", "character", "integer", "character",  "Date", "double", "double", "integer", "integer", "integer", "integer", "integer", "integer", "integer", rep("integer", 3))) %>%
filter(tourney_date >= TRAIN_START_DATE, tourney_date < TEST_END_DATE) %>%
mutate(surface = case_when(surface == "Hard" ~ 1,
surface == "Clay" ~ 2,
surface == "Grass" ~ 3,
surface == "Carpet" ~ 1),
games = w_games + l_games,
month = as.Date(paste0(strftime(tourney_date,"%Y-%m"), "-01")),
month_numeric = as.numeric(month)) %>%
mutate(Period = dense_rank(month_numeric))
# Get rankings
rankings00s = read.csv("../tennis_atp/atp_rankings_00s.csv", header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings10s = read.csv('../tennis_atp/atp_rankings_10s.csv', header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings20s = read.csv('../tennis_atp/atp_rankings_20s.csv', header = T, colClasses = c("character", "double", "character", "double")) %>%
mutate(ranking_date = as.Date(ranking_date, format="%Y%m%d"))
rankings = rbind(rankings00s, rankings10s, rankings20s)
rm(rankings00s, rankings10s, rankings20s)
head(atp_match_dat)
tail(atp_match_dat)
# Get biographical data
names = read.csv("../tennis_atp/atp_players.csv", header = T) %>%
mutate(full_name = paste(name_first, name_last)) %>%
mutate(player_id = as.character(player_id))
# Get players who've been in the top x in the 2010's and 2020's
# players_to_rate = rankings %>%
#   filter(ranking_date >= TRAIN_START_DATE, ranking_date < TRAIN_END_DATE) %>%
#   filter(rank <= 30) %>%
#   pull(player) %>%
#   unique()
# GET TRAIN / TEST
train = atp_match_dat %>%
#filter(winner_id %in% players_to_rate & loser_id %in% players_to_rate) %>%  # Could filter on the date, too.... whatever
filter(tourney_date >= TRAIN_START_DATE, tourney_date < TRAIN_END_DATE)
test = atp_match_dat %>%
#filter(winner_id %in% players_to_rate & loser_id %in% players_to_rate) %>%  # Could filter on the date, too.... whatever
filter(tourney_date >= TEST_START_DATE & tourney_date < TEST_END_DATE)
train_test = rbind(train, test)
train_idx = train_test$tourney_date >= TRAIN_START_DATE & train_test$tourney_date < TRAIN_END_DATE
test_idx = train_test$tourney_date >= TEST_START_DATE & train_test$tourney_date < TEST_END_DATE
#players_to_rate = unique(c(train$winner_id, train$loser_id))
print(dim(train))
print(dim(test))
print(colSums(is.na(train)))
head(train %>% arrange(tourney_date))
# Collect IDs for labeling players
IDs = sort(unique(c(train$winner_id, train$loser_id)))
integer_map = 1:length(IDs)
ID_integer_map_df = data.frame(ID = IDs, integer_map = integer_map)
ID_integer_map_df$ID = as.character(ID_integer_map_df$ID)
# Join with train
# train2 = train %>%
#   inner_join(ID_integer_map_df, by = c("winner_id" = "ID")) %>%
#   inner_join(ID_integer_map_df, by = c("loser_id" = "ID"), suffix = c(".winner", ".loser"))
train = train %>%
select(winner_id, loser_id, best_of, score, set_order, w_games, games, sets_won_winner, sets_won_loser, total_sets, winner_age, loser_age, N_months_since_last_match_winner,
N_months_since_last_match_loser, surface, tourney_date, month, month_numeric, Period)
# train1 = pivot_longer(train, cols = c("surface"))
# train1 = pivot_wider(train1, names_from = name, values_from = value, names_expand=TRUE)
# train1 %>%
#     dplyr::group_by(winner_id, loser_id, best_of, score, set_order, sets_won_winner, total_sets, winner_age, loser_age, N_months_since_last_match_winner, N_months_since_last_match_loser, name) %>%
#     dplyr::summarise(n = dplyr::n(), .groups = "drop") %>%
#     dplyr::filter(n > 1L)
# print(dim(train))
# print(colSums(is.na(train)))
# print(length(unique(c(train$integer_map.winner, train$integer_map.loser))))
# Join names df with ID_integer_map_df
names = names %>%
left_join(ID_integer_map_df, by = c("player_id" = "ID"))
# Setup design matrices
N = nrow(train_test)  # number of matches
J = length(unique(c(train_test$winner_id, train_test$loser_id)))  # number of total players
T = max(train$Period)
covariates = c("age", "age^2", "N_months_since_last_match")
p = length(covariates)
X_skill = matrix(0, nrow = N, ncol = 3*J)  # Matrix for the player skills
X1 = matrix(0, nrow = N, ncol = p)  # Matrix for player 1 characteristics (age, age^2, and months since last match)
X2 = matrix(0, nrow = N, ncol = p)  # Matrix for player 2 characteristics (age, age^2, and months since last match)
# Build X_skill, X1, and X2
id_players = unique(c(train_test$winner_id, train_test$loser_id))
colnames(X_skill) = c(paste0("overall_and_hard_skill_", id_players), paste0("clay_skill_", id_players), paste0("grass_skill_", id_players))
colnames(X1) = covariates
colnames(X2) = covariates
X_skill_time = matrix(0, nrow = N, ncol = J)
colnames(X_skill_time) = id_players
# Scale N_months_since_last_match
# Normalize function
# normalize = function(x) {
#   max_x = max(x)
#   min_x = min(x)
#   return((x - min_x) / (max_x - min_x))
# }
# train_test$N_months_since_last_match_winner_tilde = normalize(train_test$N_months_since_last_match_winner)
# train_test$N_months_since_last_match_loser_tilde = normalize(train_test$N_months_since_last_match_loser)
for (i in 1:N) {
# Assign baseline (hard court) skills
X_skill[i, paste0("overall_and_hard_skill_", train_test$winner_id[i])] = 1
X_skill[i, paste0("overall_and_hard_skill_", train_test$loser_id[i])] = -1
# If surface is clay, assign clay skills
if (train_test[i, "surface"] == 2) {
X_skill[i, paste0("clay_skill_", train_test$winner_id[i]) ]  = 1
X_skill[i, paste0("clay_skill_", train_test$loser_id[i]) ]  = -1
# If surface is grass, assign grass skills
} else if (train_test[i, "surface"] == 3) {
X_skill[i, paste0("grass_skill_", train_test$winner_id[i]) ]  = 1
X_skill[i, paste0("grass_skill_", train_test$loser_id[i]) ]  = -1
}
# Build X1
#X1[i, 1] = train_test[i, "winner_age_tilde"]
#X1[i, 2] = train_test[i, "winner_age_tilde"]^2
#X1[i, 3] = train_test[i, "winner_age"]^3
#X1[i, 3] = log(train_test[i, "N_months_since_last_match_winner"] + 1)
#X1[i, 3] = train_test[i, "N_months_since_last_match_winner"]
# Build X2
#X2[i, 1] = train_test[i, "loser_age_tilde"]
#X2[i, 2] = train_test[i, "loser_age_tilde"]^2
#X2[i, 3] = train_test[i, "loser_age"]^3
#X2[i, 3] = log(train_test[i, "N_months_since_last_match_loser"] + 1)
X2[i, 3] = train_test[i, "N_months_since_last_match_loser"]
# Build X_skill_time
X_skill_time[i, train_test$winner_id[i]] = train_test[i, "N_months_since_last_match_winner"]
X_skill_time[i, train_test$loser_id[i]] = train_test[i, "N_months_since_last_match_loser"]
# Build Z
# Z[i, paste0(train_test$winner_id[i], "_", years[i])] = 1
# Z[i, paste0(train_test$loser_id[i], "_", years[i])] = -1
#time_off_mat[i, paste0("time_off_", train_test$winner_id[i])] = train_test[i, "N_months_since_last_match_winner"]
#time_off_mat[i, paste0("time_off_", train_test$loser_id[i])] = train_test[i, "N_months_since_last_match_loser"]
}
# Build X_skill_time
# if (T > 1) {
#   for (t in 2:T) {
#     for (j in 1:J) {
#       temp = atp_match_dat %>%
#         filter(Period < t, (winner_id == id_players[j] | loser_id == id_players[j])) %>%
#         arrange(Period)
#       tail(1)
#       last_period = ifelse(nrow(temp) == 0, 0, temp$Period)
#       time_since_last_rating = t - last_period - 1 # Subtract 1 since if period = 2 and you were rated in period 1, this means there've been 0 periods since rating
#       X_skill_time[t, j] = time_since_last_rating
#     }
#   }
# }
# Indicator matrix z
z = X_skill[, 1:J]
z[z == -1] = 1
z1 = X_skill[, 1:J]
z1[z1 == -1] = 0
z2 = X_skill[, 1:J]
z2[z2 == 1] = 0
z2[z2 == -1] = 1
hard_idx = train_test$surface == 1
clay_idx = train_test$surface == 2
grass_idx = train_test$surface == 3
# TRAIN design matrices
X_skill_hard = X_skill[hard_idx & train_idx, 1:J]
X_skill_clay = X_skill[clay_idx & train_idx, 1:(2*J)]
X_skill_grass = X_skill[grass_idx & train_idx, c(1:J, (2*J+1):(3*J))]
X_skill_train = X_skill[train_idx, ]
X_skill_mu_train = X_skill_train[, 1:J]
X_skill_mu_train[X_skill_mu_train == -1] = 1
#X_skill_time_train = X_skill_time[train_idx, ]
# TEST design matrices
X_skill_tilde = X_skill[test_idx, ]
X1_tilde = X1[test_idx, ]
X2_tilde = X2[test_idx, ]
#time_off_mat_tilde = time_off_mat[test_idx, ]
# Prepare for TRAINING
Nhard = nrow(X_skill_hard)  # number of matches on hard
Nclay = nrow(X_skill_clay)
Ngrass = nrow(X_skill_grass)
N_train = Nhard + Nclay + Ngrass
#J = length(unique(c(train$winner_id, train$loser_id)))  # number of players
#covariates = c("age", "age^2", "N_months_since_last_match")
covariates = "N_months_since_last_match"
p = length(covariates)
# Collect remaining data for TRAINING
## FOR SETS
winner_sets_hard = train_test$sets_won_winner[hard_idx & train_idx]
winner_sets_clay = train_test$sets_won_winner[clay_idx & train_idx]
winner_sets_grass = train_test$sets_won_winner[grass_idx & train_idx]
total_sets_hard = train_test$total_sets[hard_idx & train_idx]
total_sets_clay = train_test$total_sets[clay_idx & train_idx]
total_sets_grass = train_test$total_sets[grass_idx & train_idx]
## FOR GAMES
winner_games_hard = train_test$w_games[hard_idx & train_idx]
winner_games_clay = train_test$w_games[clay_idx & train_idx]
winner_games_grass = train_test$w_games[grass_idx & train_idx]
total_games_hard = train_test$total_games[hard_idx & train_idx]
total_games_clay = train_test$total_games[clay_idx & train_idx]
total_games_grass = train_test$total_games[grass_idx & train_idx]
# For Neg-bin model
sets_lost_winner_hard = train_test$sets_won_loser[hard_idx & train_idx]  # sets lost by the winner on hard = sets won by the loser
sets_lost_winner_clay = train_test$sets_won_loser[clay_idx & train_idx]
sets_lost_winner_grass = train_test$sets_won_loser[grass_idx & train_idx]
best_of_hard = train_test$best_of[hard_idx & train_idx]
best_of_clay = train_test$best_of[clay_idx & train_idx]
best_of_grass = train_test$best_of[grass_idx & train_idx]
# Collect best_of for each test match (for binomial model), either 3 or 5
N_tilde_sets = test$best_of
N_tilde_games = 13*N_tilde_sets
# Number of test matches
N_test = nrow(X_skill_tilde)
# Try multi-threading
library(cmdstanr)
fit = cmdstan_model("../appendix/working_example/multivariate_glicko.stan", cpp_options = list(stan_threads = TRUE))
model_data = list(J = J,
N_train = nrow(train),
X_skill = X_skill_train,
X_skill_time = X_skill_time[train_idx, ],
z = z[train_idx, ],
z1 = z1[train_idx, ],
z2 = z2[train_idx, ],
X1 = X1[train_idx, 3],
X2 = X2[train_idx, 3],
total_n = train$best_of,
winner_y = train$sets_won_loser)
saveRDS(model_data, "../appendix/working_example/model_data.RDS")
setwd("~/Documents/projects/thesis/appendix/working_example")
library(cmdstanr)
# Number of matches: 1,745
# Number of players: 437
# List with inputs to the model
model_data = readRDS("./model_data.RDS")
# Fit the model
fit = cmdstan_model("./multivariate_glicko.stan", cpp_options = list(stan_threads = TRUE))
fit = fit$sample(model_data, chains = 2, parallel_chains = 2, threads_per_chain = 4, refresh = 200, iter_warmup = 250, iter_sampling=250)
model_data$N_train
model_data$J
